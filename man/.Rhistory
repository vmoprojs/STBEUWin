#################################********   SPACE   ***#######################################
#=======================Double Exponential=======================#
rm(list=ls())
########################R package#######################
require(GeoModels)
require(MCMCpack)
require(STBEU)
####location sites ########################################
lambda=8
xx=seq(-lambda,lambda);
coords=as.matrix(expand.grid(xx,xx))   ###regular
# plot(coords)
#set.seed(15)                                                                      ### not regular
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular
#coords<-cbind(pp$x,pp$y)
### not regular
####temporal instants ########################################
times=seq(1,5,1)
##################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic
maxdist=2            ## compact support in weights function for pairwise liklihood
maxtime=2
model=1  #   1=double exponential       2 =gneiting
if (model == 1) {
# exponential model
cov.model <-"exp_exp"
cc=1
#####
mean=0
nugget=0
scale_s<-1.5/3
scale_t<-1.5/3
sill=1
param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)
fixed=list(nugget=0)
fix=c(nugget=nugget)
}
##################################################################
set.seed(276)
#####################################################################################################
# Simulation of the spatial Gaussian random field:
data <- GeoSim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data
mm=mean(c(data))
vv=var(c(data))
###### Composite likelihood based on pairs estimation ###############################################
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)
# Maximum composite-likelihood fitting of the random field:
fit <- GeoFit(data=data,coordx=coords,coordt=times,
corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,
likelihood="Marginal",type="Pairwise",
start=start,fixed=fixed,weighted=TRUE)
# Results:
print(fit$param)
unlist(start)
################################################
#   parameters for the subsampling ####
###############################################
coordx=coords[,1]
coordy=coords[,2]
LX=abs(range(coordx)[1]-range(coordx)[2])
LY=abs(range(coordy)[1]-range(coordy)[2])
lato_fin=3  #changing window size
lx=lato_fin          #lunghezza lato x quadrato subfinestra
ly=lato_fin          #lunghezza lato y quadrato subfinestra
winc=c(lx/sqrt(LX),ly/sqrt(LY))
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping
###############################################
#####################################################################################################
theta=start                #starting value
weighted=0
### eucliden likelihood ################
type_subs=1    ### type of subsampling  1=in space    2= in time
tCPU = proc.time()
# names(fix) = c("nugget");names(theta) = c("mean","sill","scale_s","scale_t")
res=STBEUFit(theta,fixed = fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)
tCPU = proc.time()-tCPU;tCPU
res$par
### OpenCL eucliden likelihood ################
local <- c(1,1)
GPU <- 0
tGPU = proc.time()
res1 = STBEUFit(theta,fixed = fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)
tGPU = proc.time()-tGPU;tGPU
res1$par
tCPU;tGPU
res1 = STBEUFit(theta,fixed = fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU,varest = TRUE)
q()
