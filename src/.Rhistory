delta.t<-5
y<-as.numeric(t(datos)) # y(s_1,1),y(s_2,1),....
xy<-rep(1,ntimes)%x%as.matrix(coords)
xcoords<-xy[,1]
ycoords<-xy[,2]
tcoords<-(1:ntimes)%x%rep(1,nsites)
xdata.t<-matrix(0,ntimes,2*ns) # time covariates
tscale<-365.25
for ( i in 1: ns) {
xdata.t[,(2*(i-1)+1)]<-sin(2*pi*(i)*(1:ntimes)/tscale)
xdata.t[,(2*i)]<-cos(2*pi*(i)*(1:ntimes)/tscale)
}
xdata.s<-NULL # spatial covariates
X<-matrix(rep(1,nsites*ntimes),nsites*ntimes,1)
if (!is.null(xdata.s)) {
X<-cbind(X,kronecker(rep(1,ntimes),xdata.s))
}
if (!is.null(xdata.t)) {
X<-cbind(X,kronecker(xdata.t,rep(1,nsites)))
}
########################################################################
y1=as.numeric(t(datos))
# y<-log(y1)
# fit4<-lm(y~X[,2:9],na.action=na.exclude)
fit4<-lm(y1~X[,2:9],na.action=na.exclude)
plot(density(resid(fit4)))
plot(density(resid(fit4)),"Residulas in Mean estimation")
plot(density(resid(fit4)),"Residulas for Mean estimation")
RES = resid(fit4)
plot(density(RES),"Residulas for Mean estimation")
DATA_res=matrix(RES,nrow=nrow(datos),ncol=ncol(datos),byrow=TRUE)
dataOriginal = datos
datos=matrix(RES,nrow=nrow(datos),ncol=ncol(datos),byrow=TRUE)
summary(dist(coords))
summary(dist(times))
summary(dist(time))
time <- 1:nrow(datos)
summary(dist(time))
maxdist <- 251.6661
maxtime <- 10
winc=25    ###  length of temporal window
winstp=1 ###   0.5 half overlapping  1 "no" overlapping
#################################################################
weighted=0
type_dist=1 ### type of distance 1:euclidean
type_subs=2 ### type of subsampling  1=in space    2= in time
smooth_t=0
scale_t=0.75
scale_s=0.1
power2_t=3.5+smooth_t
power_s=2
power2_s=2.5+2*smooth_t
sep=0.5
sill=var(as.vector(datos),na.rm = TRUE)
nugget=0
mean=mean(datos,na.rm=TRUE)
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill,mean = mean)
fix=c( nugget=nugget,power_s=power_s,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
qqnorm(unlist(datos))
qqline(unlist(datos))
plot(density((datos))
)
rm(list = ls())
library(STBEU)
library(impute)
library(mapproj)
library(GeoModels)
require(scatterplot3d)
data("OntarioSummer")
OntarioSummer <- OntarioSummer[,c("temp","lon","lat","time")]
OntarioSummer <- data.frame(OntarioSummer)
OntarioSummer <- OntarioSummer[!duplicated(OntarioSummer),]
plot(density(((OntarioSummer$temp)),na.rm = TRUE),
main = "Ontario Hourly Temperature Data")
aux.wide <- reshape(OntarioSummer, idvar = c("lon","lat"), timevar = "time", direction = "wide")
datos <- as.matrix(aux.wide[,3:ncol(aux.wide)])
colnames(datos) <- seq(length(unique(OntarioSummer$time)))
datos <- t(datos)
coords <- cbind(aux.wide$lon,aux.wide$lat)
col.in <- (apply(apply(datos,2,is.na),2,sum)/nrow(datos)<0.1)
coords <- coords[col.in,]
datos <- datos[,col.in]
datos <- impute.knn(datos)
datos <- datos$data
coords_ll = coords #lon-lat coords
prj = mapproj::mapproject(coords[ ,1],coords[ ,2],projection ="sinusoidal")
coords = cbind(prj$x,prj$y) # Projected coords
coords = coords*6371
summary(as.vector(datos))
plot(coords, main = "Sinusoidal projection")
### Start Mean estimation
maxd=max(dist(coords))
maxd*0.88 #estimate for maxdist in estimation
datos=t(t(datos)/colMeans(datos))
nsites<-ncol(datos)
ntimes<-nrow(datos)
xdata.t<-(1:ntimes)
# number of harmonics
ns<-4
########################################################################
#### matrix of covariates for regression harmonic
delta.s<-as.numeric(quantile(dist(coords),probs = 0.9))
delta.t<-5
y<-as.numeric(t(datos)) # y(s_1,1),y(s_2,1),....
xy<-rep(1,ntimes)%x%as.matrix(coords)
xcoords<-xy[,1]
ycoords<-xy[,2]
tcoords<-(1:ntimes)%x%rep(1,nsites)
xdata.t<-matrix(0,ntimes,2*ns) # time covariates
tscale<-365.25
for ( i in 1: ns) {
xdata.t[,(2*(i-1)+1)]<-sin(2*pi*(i)*(1:ntimes)/tscale)
xdata.t[,(2*i)]<-cos(2*pi*(i)*(1:ntimes)/tscale)
}
xdata.s<-NULL # spatial covariates
X<-matrix(rep(1,nsites*ntimes),nsites*ntimes,1)
if (!is.null(xdata.s)) {
X<-cbind(X,kronecker(rep(1,ntimes),xdata.s))
}
if (!is.null(xdata.t)) {
X<-cbind(X,kronecker(xdata.t,rep(1,nsites)))
}
# write.table(X,"X.txt",row.names=F,col.names=T)
########################################################################
y1=as.numeric(t(datos))
fit4<-lm(y1~X[,2:9],na.action=na.exclude)
RES = resid(fit4)
plot(density(RES),"Residulas for Mean estimation")
dataOriginal = datos
datos=matrix(RES,nrow=nrow(datos),ncol=ncol(datos),byrow=TRUE)
# summary(dist(coords))
# summary(dist(time))
##### Parameters for STBEU Estimation
summary(dist(coords))
maxdist <- 514.5479
maxtime <- 15
time <- 1:nrow(datos)
winc=25    ###  length of temporal window
winstp=1 ###   0.5 half overlapping  1 "no" overlapping
###############################################
#################################################################
weighted=0
type_dist=1 ### type of distance 1:euclidean
type_subs=2 ### type of subsampling  1=in space    2= in time
smooth_t=0
scale_t=0.75
scale_s=0.1
power2_t=3.5+smooth_t
power_s=2
power2_s=2.5+2*smooth_t
sep=0.5
sill=var(as.vector(datos),na.rm = TRUE)
nugget=0
mean=mean(datos,na.rm=TRUE)
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill,mean = mean)
fix=c( nugget=nugget,power_s=power_s,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
#### ************ VARIOGRAM
### checking model assumptions: marginal distribution
# qqnorm(unlist(datos))
# qqline(unlist(datos))
### checking model assumptions: ST variogram model
ttV = proc.time()
fit = GeoVariogram(data=(datos),
coordx=coords, coordt=time,
maxdist=maxdist,maxtime=maxtime)
(ttV = proc.time()-ttV) #variogram estimation time
# user   system  elapsed
# 1380.841    3.900 1389.596
# Results: Marginal spatial empirical  semi-variogram
par(mfrow=c(2,2), mai=c(.5,.5,.3,.3), mgp=c(1.4,.5, 0))
plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),
ylim=c(0, max(fit$variograms)), xlim=c(0, max(fit$centers)),
pch=20,main="Marginal spatial semi-variogram",cex.axis=.8)
# Results: Marginal temporal empirical  semi-variogram
plot(fit$bint, fit$variogramt, xlab='t', ylab=expression(gamma(t)),
ylim=c(0, max(fit$variogramt)),xlim=c(0,max(fit$bint)),
pch=20,main="Marginal temporal semi-variogram",cex.axis=.8)
# Building space-time semi-variogram
st.vario <- matrix(fit$variogramst,length(fit$centers),length(fit$bint))
st.vario <- cbind(c(0,fit$variograms), rbind(fit$variogramt,st.vario))
# Results: 3d Spatio-temporal semi-variogram
st.grid <- expand.grid(c(0,fit$centers),c(0,fit$bint))
scatterplot3d(st.grid[,1], st.grid[,2], c(st.vario),
highlight.3d=TRUE, xlab="h",ylab="t",
zlab=expression(gamma(h,t)), pch=20,
main="Space-time semi-variogram",cex.axis=.7,
mar=c(2,2,2,2), mgp=c(0,0,0),
cex.lab=.7)
# A smoothed version
par(mai=c(.2,.2,.2,.2),mgp=c(1,.3, 0))
persp(c(0,fit$centers), c(0,fit$bint), st.vario,
xlab="h", ylab="u", zlab=expression(gamma(h,u)),
ltheta=90, shade=0.75, ticktype="detailed", phi=10,
theta=30,main="Space-time semi-variogram",cex.axis=.8,
cex.lab=.8)
?GeoModels::GeoCovariogram
rm(list = ls())
library(GeoModels)
library(STBEU)
library(scatterplot3d)
# devtools::install_github("andrewzm/STRbook")
data("Medwind_data",package = "STRbook")
plot(density(unlist(Edat$EUdat)),main = "Data")
# The data here correspond to 28 time periods
# from 00:00 UTC on 29 January 2005 to 18:00
# UTC on 04 February 2005 (every 6 hours).
# EUdat: Data frame containing the eastâ€“west (u) component of the ECMWF
# wind vector (in units of m/s) in time-wide format
coords = Edat$ECMWFxylocs
datos = matrix(unlist(Edat$EUdat),ncol = ncol(Edat$EUdat),nrow = nrow(Edat$EUdat))
datos = t(datos)
head(datos)
head(Edat$EUdat)
coords_ll = coords #lon-lat coords
prj = mapproj::mapproject(coords[ ,1],coords[ ,2],projection ="sinusoidal")
coords = cbind(prj$x,prj$y) # Projected coords
coords = coords*6371
# makeOne = function(x)
# {
#    rr = range(x)
#    return((x-rr[1])/(rr[2]-rr[1]))
# }
#
# coords[,1] = makeOne(coords[,1])
# coords[,2] = makeOne(coords[,2])
#### ************ VARIOGRAM
maxdist <-  1500
maxtime <- 10
time <- 1:nrow(datos)
### checking model assumptions: ST variogram model
varioCompute = 1
if(varioCompute){
time = 1:nrow(datos)
ttV = proc.time()
fit = GeoVariogram(data=(datos),
coordx=coords, coordt=time,
maxdist=maxdist,maxtime=maxtime)
(ttV = proc.time()-ttV) #variogram estimation time
# user   system  elapsed
# 1380.841    3.900 1389.596
# Results: Marginal spatial empirical  semi-variogram
par(mfrow=c(2,2), mai=c(.5,.5,.3,.3), mgp=c(1.4,.5, 0))
plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),
ylim=c(0, max(fit$variograms)), xlim=c(0, max(fit$centers)),
pch=20,main="Marginal spatial semi-variogram",cex.axis=.8)
# Results: Marginal temporal empirical  semi-variogram
plot(fit$bint, fit$variogramt, xlab='t', ylab=expression(gamma(t)),
ylim=c(0, max(fit$variogramt)),xlim=c(0,max(fit$bint)),
pch=20,main="Marginal temporal semi-variogram",cex.axis=.8)
# Building space-time semi-variogram
st.vario <- matrix(fit$variogramst,length(fit$centers),length(fit$bint))
st.vario <- cbind(c(0,fit$variograms), rbind(fit$variogramt,st.vario))
# Results: 3d Spatio-temporal semi-variogram
st.grid <- expand.grid(c(0,fit$centers),c(0,fit$bint))
scatterplot3d(st.grid[,1], st.grid[,2], c(st.vario),
highlight.3d=TRUE, xlab="h",ylab="t",
zlab=expression(gamma(h,t)), pch=20,
main="Space-time semi-variogram",cex.axis=.7,
mar=c(2,2,2,2), mgp=c(0,0,0),
cex.lab=.7)
# A smoothed version
par(mai=c(.2,.2,.2,.2),mgp=c(1,.3, 0))
persp(c(0,fit$centers), c(0,fit$bint), st.vario,
xlab="h", ylab="u", zlab=expression(gamma(h,u)),
ltheta=90, shade=0.75, ticktype="detailed", phi=10,
theta=30,main="Space-time semi-variogram",cex.axis=.8,
cex.lab=.8)
}
#### **************************    Estimation
##### Parameters for STBEU Estimation
summary(dist(coords))
maxdist <-  400
maxtime <- 2
winc=c(0,maxdist)  ###  length of temporal window
winstp=1 ###   0.5 half overlapping  1 "no" overlapping
###############################################
#################################################################
weighted=0
type_dist=1 ### type of distance 1:euclidean
type_subs=1 ### type of subsampling  1=in space    2= in time
smooth_t=0
scale_t=6
scale_s=100
power2_t=3.5+smooth_t
power_s=2
power2_s=2.5+2*smooth_t
sep=0.5
sill=var(as.vector(datos),na.rm = TRUE)
nugget=0
mean=mean(datos,na.rm=TRUE)
# mean = 0
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill,mean = mean)
fix=c( nugget=nugget,power_s=power_s,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
summary(dist(coords))
max(dist(coords))/maxdist
max(dist(time))/maxtime
summary(dist(time))
cc = 3
# 1: STBEU with CPU one core
tCPU = proc.time()
res1=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted)
tCPU = proc.time()-tCPU
print(tCPU)
#2 : STBEU in OpenCL framework with CPU
tGPU1 = proc.time()
res2=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted,
GPU =0, local = c(1,1))
tGPU1 = proc.time()-tGPU1
print(tGPU1)
#3: STBEU in OpenCL framework with  GPU
tGPU2 = proc.time()
res3=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted,
GPU =2, local = c(16,16))
tGPU2 = proc.time()-tGPU2
print(tGPU2)
2463.618 /60
591.572  /60
round(591.572  /60)
round(233.708 /60)
save.image("~/Documents/Software/STBEU/AppFinal/CleaningData/finalAPP.RData")
rm(list = ls())
library(GeoModels)
library(STBEU)
library(scatterplot3d)
# devtools::install_github("andrewzm/STRbook")
data("Medwind_data",package = "STRbook")
plot(density(unlist(Edat$EUdat)),main = "Data")
# The data here correspond to 28 time periods
# from 00:00 UTC on 29 January 2005 to 18:00
# UTC on 04 February 2005 (every 6 hours).
# EUdat: Data frame containing the eastâ€“west (u) component of the ECMWF
# wind vector (in units of m/s) in time-wide format
coords = Edat$ECMWFxylocs
datos = matrix(unlist(Edat$EUdat),ncol = ncol(Edat$EUdat),nrow = nrow(Edat$EUdat))
datos = t(datos)
head(datos)
head(Edat$EUdat)
coords_ll = coords #lon-lat coords
prj = mapproj::mapproject(coords[ ,1],coords[ ,2],projection ="sinusoidal")
coords = cbind(prj$x,prj$y) # Projected coords
coords = coords*6371
# makeOne = function(x)
# {
#    rr = range(x)
#    return((x-rr[1])/(rr[2]-rr[1]))
# }
#
# coords[,1] = makeOne(coords[,1])
# coords[,2] = makeOne(coords[,2])
#### ************ VARIOGRAM
maxdist <-  1500
maxtime <- 10
time <- 1:nrow(datos)
### checking model assumptions: ST variogram model
varioCompute = 1
if(varioCompute){
time = 1:nrow(datos)
ttV = proc.time()
fit = GeoVariogram(data=(datos),
coordx=coords, coordt=time,
maxdist=maxdist,maxtime=maxtime)
(ttV = proc.time()-ttV) #variogram estimation time
# user   system  elapsed
# 1380.841    3.900 1389.596
# Results: Marginal spatial empirical  semi-variogram
par(mfrow=c(2,2), mai=c(.5,.5,.3,.3), mgp=c(1.4,.5, 0))
plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),
ylim=c(0, max(fit$variograms)), xlim=c(0, max(fit$centers)),
pch=20,main="Marginal spatial semi-variogram",cex.axis=.8)
# Results: Marginal temporal empirical  semi-variogram
plot(fit$bint, fit$variogramt, xlab='t', ylab=expression(gamma(t)),
ylim=c(0, max(fit$variogramt)),xlim=c(0,max(fit$bint)),
pch=20,main="Marginal temporal semi-variogram",cex.axis=.8)
# Building space-time semi-variogram
st.vario <- matrix(fit$variogramst,length(fit$centers),length(fit$bint))
st.vario <- cbind(c(0,fit$variograms), rbind(fit$variogramt,st.vario))
# Results: 3d Spatio-temporal semi-variogram
st.grid <- expand.grid(c(0,fit$centers),c(0,fit$bint))
scatterplot3d(st.grid[,1], st.grid[,2], c(st.vario),
highlight.3d=TRUE, xlab="h",ylab="t",
zlab=expression(gamma(h,t)), pch=20,
main="Space-time semi-variogram",cex.axis=.7,
mar=c(2,2,2,2), mgp=c(0,0,0),
cex.lab=.7)
# A smoothed version
par(mai=c(.2,.2,.2,.2),mgp=c(1,.3, 0))
persp(c(0,fit$centers), c(0,fit$bint), st.vario,
xlab="h", ylab="u", zlab=expression(gamma(h,u)),
ltheta=90, shade=0.75, ticktype="detailed", phi=10,
theta=30,main="Space-time semi-variogram",cex.axis=.8,
cex.lab=.8)
}
#### **************************    Estimation
##### Parameters for STBEU Estimation
summary(dist(coords))
maxdist <-  400
maxtime <- 10
winc=c(0,maxdist)  ###  length of temporal window
winstp=1 ###   0.5 half overlapping  1 "no" overlapping
###############################################
#################################################################
weighted=0
type_dist=1 ### type of distance 1:euclidean
type_subs=1 ### type of subsampling  1=in space    2= in time
smooth_t=0
scale_t=6
scale_s=100
power2_t=3.5+smooth_t
power_s=2
power2_s=2.5+2*smooth_t
sep=0.5
sill=var(as.vector(datos),na.rm = TRUE)
nugget=0
mean=mean(datos,na.rm=TRUE)
# mean = 0
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill,mean = mean)
fix=c( nugget=nugget,power_s=power_s,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
summary(dist(coords))
max(dist(coords))/maxdist
max(dist(time))/maxtime
summary(dist(time))
cc = 3
# 1: STBEU with CPU one core
tCPU = proc.time()
res1=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted)
tCPU = proc.time()-tCPU
print(tCPU)
#2 : STBEU in OpenCL framework with CPU
tGPU1 = proc.time()
res2=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted,
GPU =0, local = c(1,1))
tGPU1 = proc.time()-tGPU1
print(tGPU1)
#3: STBEU in OpenCL framework with  GPU
tGPU2 = proc.time()
res3=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted,
GPU =2, local = c(16,16))
tGPU2 = proc.time()-tGPU2
print(tGPU2)
save.image("~/Documents/Software/STBEU/AppFinal/CleaningData/finalAPPMaxtime.RData")
str(fit)
# ******************
load("~/Documents/Software/STBEU/AppFinal/CleaningData/finalAPPMaxtime.RData")
h = fit$bins
u = fit$bint
res1$par
power_s
res1$par
res1$par[names(res1$par)=="scale_s"]
res1$par[names(res1$par)=="scale_t"]
c("power_s","power2_s","power2_t","scale_s","scale_t",
"sep","smooth")
parEval = c(power_s = power_s,power2_s=power2_s,
power2_t=power2_t,scale_s=res1$par[names(res1$par)=="scale_s"],
scale_t=res1$par[names(res1$par)=="scale_t"],sep=sep,smooth=smooth)
parEval = c(power_s = power_s,power2_s=power2_s,
power2_t=power2_t,scale_s=res1$par[names(res1$par)=="scale_s"],
scale_t=res1$par[names(res1$par)=="scale_t"],sep=sep,smooth=smooth)
res = 0
sol = .C("CorFct_call",as.double(cc),as.double(h),as.double(u),
as.double(parEval),as.double(res),PACKAGE = "STBEU")
str(parEval)
smooth_t
parEval = c(power_s = power_s,power2_s=power2_s,
power2_t=power2_t,scale_s=res1$par[names(res1$par)=="scale_s"],
scale_t=res1$par[names(res1$par)=="scale_t"],sep=sep,smooth=smooth_t)
res = 0
sol = .C("CorFct_call",as.double(cc),as.double(h),as.double(u),
as.double(parEval),as.double(res),PACKAGE = "STBEU")
res = 0
sol = .C("CorFct_call",as.double(cc),as.double(h),as.double(u),
as.double(parEval),as.double(res),  PACKAGE='STBEU',DUP = TRUE, NAOK=TRUE)
load("~/Documents/Software/STBEU/AppFinal/CleaningData/finalAPPMaxtime.RData")
h = fit$bins
u = fit$bint
c("power_s","power2_s","power2_t","scale_s","scale_t",
"sep","smooth")
parEval = c(power_s = power_s,power2_s=power2_s,
power2_t=power2_t,scale_s=res1$par[names(res1$par)=="scale_s"],
scale_t=res1$par[names(res1$par)=="scale_t"],sep=sep,smooth=smooth_t)
length(h)
length(u)
rr = 0
setwd("~/Documents/Software/STBEU/STBEUStage/STBEU/src")
dyn.load("STBEU.so")
sol = .C("CorFct_call",as.double(cc),as.double(h[13]),as.double(u[10]),
as.double(parEval),res = as.double(rr),  PACKAGE='STBEU',DUP = TRUE, NAOK=TRUE)
sol$res
